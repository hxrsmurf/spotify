Description: Spotify - Now Playing

Parameters:
  Bucket:
    Type: String
    Default: None

  Key:
    Type: String
    Default: now_playing.zip

  CallbackURL:
    Type: String
    Default: None
  CurrentTrack:
    Type: String
    Default: None

  EventBridgeSchedule:
    Type: String
    Default: None
  EventBridgeState:
    Type: String
    Default: None

  PreviousEntryEpochTime:
    Type: String
    Default: None
  RedirectUri:
    Type: String
    Default: None

  RequestsLayerArn:
    Type: String
    Default: None

  SpotifyClientID:
    Type: String
    Default: None
  SpotifyClientSecret:
    Type: String
    Default: None
  SpotifyRefreshToken:
    Type: String
    Default: None

  Table:
    Type: String
    Default: None

  Topic:
    Type: String
    Default: None

Resources:
  Lambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Ref Key

      Handler: index.handler
      Role: !GetAtt Role.Arn
      Runtime: python3.9
      Timeout: 300
      Layers:
        - !Ref RequestsLayerArn
      Environment:
        Variables:
          CallbackURL: !Ref CallbackURL
          CurrentTrack: !Ref CurrentTrack
          PreviousEntryEpochTime: !Ref PreviousEntryEpochTime
          RedirectUri: !Ref CallbackURL
          SpotifyClientID: !Ref SpotifyClientID
          SpotifyClientSecret: !Ref SpotifyClientSecret
          SpotifyRefreshToken: !Ref SpotifyRefreshToken
          Table: !ImportValue spotify-tracker-sam-TableName
          Topic: !ImportValue spotify-tracker-sam-TopicArn

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 90

  LogGroup1:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 90

  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DynamoDB
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ConditionCheckItem'
                Resource:
                  - !Sub
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName: !ImportValue spotify-tracker-sam-TableName
                  - !Sub
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                    - tableName: !ImportValue spotify-tracker-sam-TableName
        - PolicyName: SSM
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:DescribeParameters'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                  - 'ssm:PutParameter'
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SpotifyClientID}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SpotifyClientSecret}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SpotifyRefreshToken}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CurrentTrack}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${PreviousEntryEpochTime}
        - PolicyName: EventBridge
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'events:PutRule'
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/SpotifyNowPlaying
        - PolicyName: SNS
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:publish'
                Resource:
                  - !ImportValue spotify-tracker-sam-TopicArn
        - PolicyName: LogGroup
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource:
                  - !GetAtt LogGroup.Arn

  LambdaEventBridgePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Lambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEventBridge.Arn

  LambdaEventBridge:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: SpotifyNowPlaying
      ScheduleExpression: !Ref EventBridgeSchedule
      State: !Ref EventBridgeState
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: LambdaEventBridgeLambdaTarget